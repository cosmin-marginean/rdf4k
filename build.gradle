plugins {
    id "java-library"
    id "maven-publish"
    id "jacoco"
    id "com.glovoapp.semantic-versioning" version "1.1.10"
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.dokka" version "1.7.20"
    id "com.github.nbaztec.coveralls-jacoco" version "1.2.15"
}

group = "org.rdfk"

repositories {
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        force 'it.unibz.inf.ontop:ontop-rdf4j-config-sql:4.2.2'
        force 'it.unibz.inf.ontop:ontop-ontology-owlapi:4.2.2'
        force 'it.unibz.inf.ontop:ontop-system-sql-owlapi:4.2.2'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.slf4j:slf4j-api:1.7.36"
    implementation "org.eclipse.rdf4j:rdf4j-rio-api:4.2.3"
    implementation "org.eclipse.rdf4j:rdf4j-runtime:4.2.3"

    testImplementation "org.testng:testng:7.7.0"
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
    testImplementation "org.awaitility:awaitility:4.2.0"
    testImplementation "ch.qos.logback:logback-classic:1.4.5"
    testImplementation "io.github.serpro69:kotlin-faker:1.10.0"
    testImplementation "org.testcontainers:testcontainers:1.17.6"
    testImplementation "com.ontotext.graphdb:graphdb-runtime:10.1.2"
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

test {
    useTestNG()
    testLogging {
        showStandardStreams = true
    }
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        xml.setDestination(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
    }
}

dokkaHtml {
    outputDirectory.set(file("../docs/dokka/${project.name}"))
}

publishing {
    repositories {
        mavenLocal()
        maven {
            url = "s3://resoluteworks-maven"
            credentials(AwsCredentials) {
                accessKey = System.env.AWS_ACCESS_KEY_ID
                secretKey = System.env.AWS_SECRET_ACCESS_KEY
            }
        }
    }
    publications {
        jar(MavenPublication) {
            from components.java
        }
    }
}

task fullBuild {
    dependsOn 'clean'
    dependsOn 'test'
    dependsOn 'jacocoTestReport'
    dependsOn 'coverallsJacoco'
    tasks.findByName('jacocoTestReport').mustRunAfter 'test'
    tasks.findByName('coverallsJacoco').mustRunAfter 'jacocoTestReport'
}
